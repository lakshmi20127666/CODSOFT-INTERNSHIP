import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import OneHotEncoder
import matplotlib.pyplot as plt
import seaborn as sns

# Inline dataset (replace with your own dataset if needed)
data = {
    "Title": ["Movie1", "Movie2", "Movie3", "Movie4", "Movie5"],
    "Genre": ["Action", "Comedy", "Drama", "Action", "Drama"],
    "Director": ["Dir1", "Dir2", "Dir3", "Dir1", "Dir3"],
    "Actors": ["Actor1, Actor2", "Actor3, Actor4", "Actor5, Actor6", "Actor1, Actor2", "Actor5, Actor6"],
    "Rating": [7.5, 6.8, 8.2, 7.0, 8.5]
}

movies = pd.DataFrame(data)

# Display the dataset
print("Dataset Preview:")
print(movies.head())

# Step 2: Data Cleaning
# Drop rows with missing values (not necessary here since inline data has no missing values)
movies = movies.dropna()

# Step 3: Feature Engineering
# One-Hot Encode the 'Genre' column
encoder = OneHotEncoder()
genre_encoded = encoder.fit_transform(movies[['Genre']]).toarray()

genre_columns = [f"Genre_{cat}" for cat in encoder.categories_[0]]
movies_encoded = pd.concat([
    movies,pd.DataFrame(genre_encoded, columns=genre_columns, index=movies.index)
], axis=1)
# Drop the original 'Genre' column
movies_encoded = movies_encoded.drop(columns=['Genre', 'Title', 'Director', 'Actors'])

# Step 4: Define Features and Target
X = movies_encoded.drop(columns=['Rating'])
y = movies_encoded['Rating']

# Step 5: Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train the Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 7: Evaluate the Model
y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"R^2 Score: {r2}")


# Step 8: Feature Importance
feature_importances = model.feature_importances_
plt.figure(figsize=(10, 6))
plt.barh(X.columns, feature_importances, color='skyblue')
plt.title("Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Features")
plt.show()
