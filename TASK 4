# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Generate synthetic sales dataset
data = {
    'Advertising Spend (in $1000)': [10, 15, 20, 25, 30, 35, 40, 45, 50, 55],
    'Target Audience Reach (in 1000s)': [200, 250, 300, 350, 400, 450, 500, 550, 600, 650],
    'Sales (in $1000)': [30, 40, 50, 65, 70, 85, 95, 110, 120, 135]
}

# Create a DataFrame
df = pd.DataFrame(data)
print("Dataset:")
print(df)

# Features (X) and Target (y)
X = df[['Advertising Spend (in $1000)', 'Target Audience Reach (in 1000s)']]
y = df['Sales (in $1000)']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

# Visualize the actual vs predicted sales
plt.figure(figsize=(8, 6))
plt.scatter(range(len(y_test)), y_test, label='Actual Sales', color='blue', alpha=0.7)
plt.scatter(range(len(y_pred)), y_pred, label='Predicted Sales', color='red', alpha=0.7)
plt.title('Actual vs Predicted Sales')
plt.xlabel('Sample Index')
plt.ylabel('Sales (in $1000)')
plt.legend()
plt.show()

# Display model coefficients
coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
print("Model Coefficients:")
print(coefficients)
