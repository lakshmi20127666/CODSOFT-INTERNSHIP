# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt

# Generate synthetic credit card transaction data
data = {
    'Transaction Amount': np.random.randint(1, 1000, 1000),
    'Transaction Time': np.random.randint(0, 24, 1000),
    'Fraudulent': np.concatenate((np.zeros(950), np.ones(50)))  # Class imbalance
}

# Create a DataFrame
df = pd.DataFrame(data)

# Shuffle the dataset
df = df.sample(frac=1, random_state=42).reset_index(drop=True)

print("Dataset:")
print(df.head())

# Features (X) and Target (y)
X = df[['Transaction Amount', 'Transaction Time']]
y = df['Fraudulent']

# Handle class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=42)

# Initialize and train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Feature importance visualization
importances = model.feature_importances_
features = X.columns
plt.figure(figsize=(8, 6))
plt.bar(features, importances, color='teal')
plt.title('Feature Importances')
plt.xlabel('Features')
plt.ylabel('Importance')
plt.show()
